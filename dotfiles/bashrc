################################################################################
##                                                                            ##
##                             ~ AWESOME   BASHRC ~                           ##
##                                 by winklerrr                               ##
##                                                                            ##
##                             github.com/winklerrr                           ##
##                                                                            ##
##                               ENJOY YOUR DAY !                             ##
##                                                                            ##
################################################################################


############################### INTERNAL VARIABLES #############################

# PATH
THIS="$BASH_SOURCE"
THIS_DIR="$(cd "$(dirname "${THIS}")" >/dev/null 2>&1 && pwd)"
ROOT_DIR="$(dirname "${THIS_DIR}")"


############################### INTERNAL FUNCTIONS #############################

# RETURN THE CURRENT GIT BRANCH OR AN EMPTY STRING
# https://medium.com/@thucnc/how-to-show-current-git-branch-with-colors-in-bash-prompt-380d05a24745
get_current_git_branch () {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/<\1> /'
}


##################################### PATHS ####################################

# WORKAROUND FOR PERMISSION PROBLEM WITH GLOBALLY INSTALLED NODE PACKAGES
# http://npm.github.io/installation-setup-docs/installing/a-note-on-permissions.html
#   1. mkdir ~/.npm-global
#   2. npm config set prefix '~/.npm-global'
NPM_PATH="$HOME/.npm-global/bin"
if [[ -d "$NPM_PATH" ]]; then
    # only add to path once
    if [[ ":$PATH:" != *":$NPM_PATH:"* ]]; then
        export PATH="$NPM_PATH:$PATH"
    fi
fi


#################################### PLUGINS ###################################

# AUTO COMPLETION
AUTO_COMPLETION="bash_completion.sh"
AUTO_COMPLETION_LINUX="/etc/profile.d/${AUTO_COMPLETION}"
AUTO_COMPLETION_MAC="/usr/local/etc/profile.d/${AUTO_COMPLETION}"

# -r: if file exists and is readable
if [[ -r "$AUTO_COMPLETION_LINUX" ]]; then
  source "$AUTO_COMPLETION_LINUX"
elif [[ -r "$AUTO_COMPLETION_MAC" ]]; then
  source "$AUTO_COMPLETION_MAC"
else
  echo "> Unable to find '${AUTO_COMPLETION}'"
  echo "> Maybe you need to install it: 'sudo apt update && sudo apt install bash-completion -y'"
fi


# CD WITH HISTORY
IMPROVED_CD="utils/improved_cd.sh"
IMPROVED_CD_FULL="${THIS_DIR}/${IMPROVED_CD}"

if [[ -r "$IMPROVED_CD_FULL" ]]; then
  source "$IMPROVED_CD_FULL"
else
  echo "> Unable to find '${IMPROVED_CD}'"
fi


# GIT HTTPS2SSH
GIT_HTTPS2SSH="utils/github_https2ssh.sh"
GIT_HTTPS2SSH_FULL="${THIS_DIR}/${GIT_HTTPS2SSH}"

if [[ -r "$GIT_HTTPS2SSH_FULL" ]]; then
  source "$GIT_HTTPS2SSH_FULL"
else
  echo "> Unable to find '${GIT_HTTPS2SSH}'"
fi


#################################### SETTINGS ##################################

# SUPPRESS THE MACOS WARNING FOR NOT USING ZSH
export BASH_SILENCE_DEPRECATION_WARNING=1

# USE XTREM AS DEFAULT
export TERM=xterm-256color

# USE VIM AS DEFAULT EDITOR/VISUAL (FOR GIT, ETC.)
export VISUAL=/usr/bin/vim
export EDITOR=/usr/bin/vim

# USE VIM IN BASH
set -o vi

# SET THE PROMPT
# https://www.howtogeek.com/307701/how-to-customize-and-colorize-your-bash-prompt/
# 
#   variables:
#     \t: timestamp
#     \u: user name
#     \w: working directory
#     \$: show $ or # according to privileges
#
#   styling looks like: \[\e[ATTRIBUTE;COLORm\]
#
#   attributes:
#     00; normal text
#     01; bold text
#     02; dim text
#
#   colors:
#     00: no color
#     30: black
#     31: red
#     32: green
#     33: yellow
#     34: blue
#     35: purple
#     36: cyan
#     37: white
PS1=" \[\e[1;31m\][\t] \[\e[1;32m\]\u\[\e[00m\]:\[\e[1;34m\]\w \[\e[1;35m\]\$(get_current_git_branch)\[\e[00m\]\$ "


##################################### ALIASES ##################################
# FOR A FULL LIST OF ACTIVE ALIASES, 
# RUN THE `ALIAS` COMMAND

# UNALIAS EVERYTHING BEFORE ALIASING AGAIN
unalias -a


# GENERAL
alias c="clear"

alias cp="cp -iv"
alias mv="mv -iv"

alias md="my_mkdir -p"
alias mkdir="my_mkdir -pv"
alias rd="rmdir"

alias grep="grep --color=auto"
alias egrep="egrep --color=auto"
alias fgrep="fgrep --color=auto"

alias upd="sudo apt update"
alias upg="sudo apt upgrade"
alias updg="upd && upg"

alias v="vim"
alias doch='sudo "$BASH" -c "$(history -p !!)"'


# LIST DIRECTORY
#   --almost-all to show all except `.` and `..`
#   --color=always show colors
#   -p to add `/` after directories
#   -l for table
#   -s show file size
#   -S order by file size
#   -h make size human readable
alias l="/bin/ls --color=always -p"  
alias la="l --almost-all"
alias ll="l -l"  
alias ls="ll -asSh"  


# CHANGE DIR
alias cd="my_cd"
alias ~="cd ~"

# use -- to indicate end of options, to set alias for -
alias -- -="cd -"  
alias -- --="cd --"  
alias -- -1="cd -"
alias -- -2="cd -2"
alias -- -3="cd -3"
alias -- -4="cd -4"
alias -- -5="cd -5"
alias -- -6="cd -6"
alias -- -7="cd -7"
alias -- -8="cd -8"
alias -- -9="cd -9"
alias -- -0="cd -10"

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

alias .3="...."
alias .4="....."
alias .5="......"
alias .6="......."

# SAVE AND LOAD DIR
# quick way to set default start path, use '' to set alias literrally 
alias current_dir="pwd | sed -e 's/ /\\ /'"
alias save_dir='echo $(current_dir) > ~/.saved_dir && echo "> current dir successfully saved! use \"load_dir\" (or \"ld\") to cd to it"'
alias load_dir='builtin cd $(cat ~/.saved_dir 2>/dev/null)'

alias sd="save_dir"
alias ld="load_dir"

# SPECIAL DIRS
# special directories used for these config files
alias awesome="cd '${ROOT_DIR}'"

alias configs="cd '${THIS_DIR}'"
alias dotfiles="cd '${THIS_DIR}'"

alias settings="cd '${ROOT_DIR}/settings'"
alias cheatsheets="cd '${ROOT_DIR}/wiki/cheatsheets'"
alias notes="cd '${ROOT_DIR}/wiki/notes'"

# DOCKER
alias d="docker"
alias dc="docker container ls"
alias di="docker image ls"


# GIT
alias g="git"

alias gs="git status"

alias gd="git diff"               # show diff of all (given) files (unstaged only)
alias gds="git diff --staged"     # show diff of all (given) files (staged only)
alias gdh="git diff HEAD"         # show diff of all (given) files (staged + unstaged)
alias gdc="git diff --check"      # check diff for merge conflicts
alias gdn="git diff --name-only"  # show only names of changed files

alias gl="git log"
alias gm="git merge"

alias gb="git branch"  
alias gbn="gcob"  # create a new branch
alias gbd="git branch -d"  # delete branch

alias gco="git checkout"
alias gcob="git checkout -b"

alias grm="git_remove_staged"  # remove given files or all from stage back to unstaged
alias grma="git_remove_staged_all"  # remove given files or all from stage back to unstaged

alias greset="git reset HEAD"  # remove all files from stage back to unstaged
alias gresetlast="git reset --soft HEAD~1"  # remove the last commit without removing the commited files from the stage 

alias ga="git add"
alias ga.="git add ."  # add all changes in the current directory to the stage (also untracked)
alias gaa="git add --all"  # add all changes to the stage (also untracked)
alias gau="git add --update"  # add all changes to the stage for tracked files only

alias gf="git fetch"
alias gp="git pull"

alias gpsh="git push"
alias gpshu="git_push_set_upstream"

alias gre="git rebase"  # rebase from origin
alias grei="git rebase -i"  # rebase locally to rename, reorder and change local commits

alias gc="git_commit"
alias gca="gac"
alias gcaa="gaac"  
alias gac="git_add_commit"  
alias gac!="git_add_commit_amend"  
alias gaac="git_add_all_commit"  
alias gaac!="git_add_all_commit_amend"  

alias gurl="git config remote.origin.url"
alias gbranch="git branch | grep '*' | cut -c 3-"
alias gname="git config user.name"
alias gmail="git config user.email"
alias ginfo="git_info"

alias ghttps2ssh="git_https2ssh"


# COPY PASTE
if [[ ! -r /proc/version ]]; then
  # on MAC
  alias copy="pbcopy"
  alias paste="pbpaste"
elif grep -q -i microsoft /proc/version; then
  # on WSL
  alias copy="clip.exe"
  alias paste="powershell.exe Get-Clipboard"
else
  # on normal linux
  alias copy="xclip -sel clip"
  alias paste="xclip -sel clip -o"
fi


# CONFIGS
alias reload="source '${THIS}' && echo '> Done loading ~ AWESOME BASHRC ~'"

alias bashrc="vim '${THIS}' && reload"
alias vimrc="vim '${THIS_DIR}/vimrc'"
alias inputrc="vim '${THIS_DIR}/inputrc'"
alias tmuxrc="vim '${THIS_DIR}/tmux.conf'"
alias tmuxconf="tmuxrc"


############################ BASIC FUNCTIONS ###################################

my_cd () {
  improved_cd "$@"
  [[ $? -eq 0 ]] && l
}

my_mkdir () {
  if [ $# -eq 1 ]; then
    /bin/mkdir $1 && cd $1
  else
    /bin/mkdir "$@"
  fi
}


############################## GIT FUNCTIONS ###################################

git_info () {
  printf 'URL: ' && gurl 
  printf 'Branch: ' && gbranch 
  printf 'Name: ' && gname 
  printf 'Mail: ' && gmail
}

# remove files from staged area without losing modifications
git_remove_staged () {
  if [ -z "$1" ]; then
    git reset HEAD -- .  # remove all files in the current workind dir
    #git restore --staged -- .
  else 
    git reset HEAD -- "$*"  # remove all files in the current workind dir
    #git restore --staged -- "$*"
  fi
}

git_remove_staged_all () {
  git_remove_staged "*" # remove all files in the current workind dir
}

git_commit () {
  if [ -z "$1" ]; then
    git commit 
  else 
    git commit -m "$*"
  fi
}

# add all changes from the current directory and commit them
git_add_commit () {
  git add . && git_commit "$*"
}

# add all changes regardless of their directory and commit them
git_add_all_commit () {
  git add -A && git_commit "$*"
}

# commit with --amend and --no-edit
git_commit_amend () {
  if [[ "$1" == "." ]]; then
    git add .
  elif [[ "$1" == "-A" ]]; then
    git add -A
  elif [[ ! -z $1 ]]; then
    echo "Use '.' or '-A' as extra parameter"
    return 1
  fi
    
  git commit --amend --no-edit
}

# add all changes from the current repository 
# and commit them with --amend and --no-edit
git_add_commit_amend () {
  git_commit_amend .
}

# add all changes regardless of their directory
# and commit them with --amend and --no-edit
git_add_all_commit_amend () {
  git_commit_amend -A
}

git_push_set_upstream () {
  if [[ ! -z $2 ]]; then
    # two parameters
    git push --set-upstream "$1" "$2"
  elif [[ ! -z $1 ]]; then
    # one parameters, using origin as default
    git push --set-upstream origin "$1"
  fi

  # no parameter, using origin and current branch name as default
  git push --set-upstream origin "$(gbranch)"
}


############################## NS FUNCTIONS ###################################

# START ANDROID EMULATION
android-sim () {
  if [[ -z "$1" ]]; then
    echo "No Android device supplied as argument!"
    return 1
  fi

  if [[ -d "$ANDROID_HOME" ]]; then
    (
      cd "$ANDROID_HOME/emulator" 
      ./emulator "@$1" &
    )  &>/dev/null 
  else
    echo "The variable ANDROID_HOME is not set to a correct directory!"
  fi
}


############################ AUTO START FUNCTIONS #############################

if [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] \
  && [[ ! "$TERM_PROGRAM" =~ vscode ]] \
  && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
  # only load while in interactive console but not in vscode or not in tmux itself

  if [[ "${PWD,,}" == "/mnt/c/windows/system32" ]]; then
    # only load path if we start in default WSL system32 folder 
    # so "open in linux shell" still works
    load_dir
  fi

  if command -v tmux &> /dev/null; then 
    # only run tmux if it is installed
    exec tmux
  fi
fi

