################################################################################
##                                                                            ##
##                             ~ AWESOME   BASHRC ~                           ##
##                                 by winklerrr                               ##
##                                                                            ##
##                             github.com/winklerrr                           ##
##                                                                            ##
##                               ENJOY YOUR DAY !                             ##
##                                                                            ##
################################################################################


################################### VARIABLES ##################################

# PATH
THIS="$BASH_SOURCE"
THIS_DIR="$(cd "$(dirname "${THIS}")" >/dev/null 2>&1 && pwd)"
PARENT_DIR="$(dirname "${THIS_DIR}")"


############################### INTERNAL FUNCTIONS #############################


# RETURN THE CURRENT GIT BRANCH OR AN EMPTY STRING
# https://medium.com/@thucnc/how-to-show-current-git-branch-with-colors-in-bash-prompt-380d05a24745
function get_current_git_branch {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/<\1> /'
}


##################################### PLUGINS ##################################

# AUTO COMPLETION
AUTO_COMPLETION="/etc/profile.d/bash_completion.sh"
if [[ -f "$AUTO_COMPLETION" ]]; then
  source "$AUTO_COMPLETION"
else
  echo "> Unable to find 'bash_completion.sh'"
  echo "> Maybe you need to install it: 'sudo apt update && sudo apt install bash-completion'"
fi


#################################### SETTINGS ##################################

# SHOW AND CYCLE THROUGH COMMAND POSSIBILITIES ON TAB
bind "set show-all-if-ambiguous on"
bind "TAB:menu-complete"

# USE XTREM AS DEFAULT
export TERM=xterm

# USE VIM AS DEFAULT EDITOR/VISUAL (FOR GIT, ETC.)
export VISUAL=/usr/bin/vim
export EDITOR=/usr/bin/vim

# USE VIM IN BASH
set -o vi

# SET THE PROMPT
# https://www.howtogeek.com/307701/how-to-customize-and-colorize-your-bash-prompt/
# 
#   variables:
#     \t: timestamp
#     \u: user name
#     \w: working directory
#     \$: show $ or # according to privileges
#
#   styling looks like: \[\e[ATTRIBUTE;COLORm\]
#
#   attributes:
#     00; normal text
#     01; bold text
#     02; dim text
#
#   colors:
#     00: no color
#     30: black
#     31: red
#     32: green
#     33: yellow
#     34: blue
#     35: purple
#     36: cyan
#     37: white
PS1=" \[\e[1;31m\][\t] \[\e[1;32m\]\u\[\e[00m\]:\[\e[1;34m\]\w \[\e[1;35m\]\$(get_current_git_branch)\[\e[00m\]\$ "


##################################### ALIASES ##################################
# FOR A FULL LIST OF ACTIVE ALIASES, 
# RUN THE `ALIAS` COMMAND

# UNALIAS EVERYTHING BEFORE ALIASING AGAIN
unalias -a

# GENERAL
alias c="clear"
alias md="mkdir"

alias v="vim"

# LIST DIRECTORY
#   -A to show all except `.` and `..`
#   -G auto color
#   -p to add `/` after directories
#   -l for table
#   -sS show file size and order accordingly
alias ls="ls -ApG"  
alias l="ls -l"  
alias ll="l -sS"  

# CHANGE DIR
alias ~="cd ~"
alias -- -="cd -"  # use -- to indicate end of options

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

# GIT
alias g="git"

alias gs="git status"
alias gd="git diff HEAD"  # show diff for all (given) files
alias gds="git diff --staged"  # show diff for staged files
alias gl="git log"
alias gb="git branch"

alias ga="git add"
alias ga.="git add ."
alias gaa="git add -A"
alias gres="git reset HEAD~1"

alias gf="git fetch"
alias gp="git pull"
alias gpsh="git push"

alias gre="git rebase"
alias gri="git rebase -i"

alias gac="gca"  # alias for 'git add commit' function
alias gaac="gcaa"  # alias for 'git add all commit' function

alias gurl="printf 'URL: ' && git config remote.origin.url"
alias gbranch="printf 'Branch: ' && git branch | grep '*' | cut -c 3-"
alias gname="printf 'Name: ' && git config user.name"
alias gmail="printf 'Mail: ' && git config user.email"
alias ginfo="gurl && gbranch && gname && gmail"

# CONFIGS
alias configs="cd '${THIS_DIR}'"
alias dotfiles="cd '${THIS_DIR}'"
alias awesome="cd '${PARENT_DIR}'"
alias cheatsheets="cd '${PARENT_DIR}/cheatsheets'"
alias notes="cd '${PARENT_DIR}/notes'"

alias reload="source '${THIS}' && echo '> Done loading ~ AWESOME BASHRC ~'"

alias bashrc="vim '${THIS}' && reload"
alias vimrc="vim '${THIS_DIR}/vimrc'"
alias tmuxrc="vim '${THIS_DIR}/tmux.conf'"
alias inputrc="vim '${THIS_DIR}/inputrc'"


################################## FUNCTIONS ###################################

function cd {
  builtin cd $1 && ls
}

function mkdir {
  if [ $# -eq 1 ]; then
    /bin/mkdir $1 && cd $1
  else
    /bin/mkdir "$@"
  fi
}

# GIT COMMIT
function gc {
  if [ -z "$1" ]; then
    git commit 
  else 
    git commit -m "$*"
  fi
}

# GIT COMMIT ALL
#   add all changes from the current directory and commit them
function gca {
  git add . && gc "$*"
}

# GIT COMMIT ALL ALL
#   add all changes regardless of their directory and commit them
function gcaa {
  git add -A && gc "$*"
}

# GIT COMMIT AMEND
#   commit with --amend and --no-edit
function gcamend {
  if [[ "$1" == "." ]]; then
    git add .
  elif [[ "$1" == "-A" ]]; then
    git add -A
  elif [[ ! -z $1 ]]; then
    echo "Use '.' or '-A' as extra parameter"
    return 1
  fi
    
  git commit --amend --no-edit
}

# GIT COMMIT AMEND ALL
#   add all changes from the current repository 
#   and commit them with --amend and --no-edit
function gcamenda {
  gcamend .
}

# GIT COMMIT AMEND ALL ALL
#   add all changes regardless of their directory
#   and commit them with --amend and --no-edit
function gcamendaa {
  gcamend -A
}
